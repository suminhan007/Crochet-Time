import React, {useEffect,  useState} from "react";
import supabase from "../../../utils/supabse.ts";
import {
    LandAlert,
    LandDialog,
    LandLoading, LandMessage,
    LandState
} from "@suminhan/land-design";
import ImgPreview from "../../../components/ImgPreivew.tsx";
import InspirationCard from "./InspirationCard.tsx";

type Props = {
    isEnglish?:boolean;
    firstIn?:boolean;
}
const CommunityInspirationCard:React.FC<Props> = ({
                                                      isEnglish,
                                                      firstIn
                                                  }) => {
    const [loading,setLoading] = useState(true);
    const [communityColorCardData, setCommunityInspirationCardData] = useState<any[]>([]);
    const fetchLatestImage = async () => {
        const { data:communityData, error } = await supabase
            .from('inspirationCard')
            .select('id, img_url').order('created_at', { ascending: false })

        if (error) {
            console.error('Error fetching image:', error);
        } else if (communityData && communityData.length > 0) {
            const { data: UrlData, error:UrlError } = await supabase
                .storage
                .from('CroKnitTime')
                .createSignedUrls(communityData?.map(i => `inspirationCards/${i.img_url}`), 60)
            if(UrlError){}else{
                const imgData = communityData?.map((i,idx) => Object.assign(i, {
                    img_url: UrlData[idx].signedUrl
                }));
                setCommunityInspirationCardData(imgData); // 更新图片 URL
            }
        }
        setLoading(false);
    };

    // 初始化时获取最新图片
    useEffect(() => {
        setLoading(true);
        fetchLatestImage();
    }, []);


    const [toast, setToast] = useState<boolean>(false);
    const [toastText, setToastText] = useState<string>("");
    //@ts-ignore
    const handleShowToast = (show: boolean, text: string) => {
        setToastText(text);
        setToast(show);
        const timer = setTimeout(() => {
            setToast(false);
            clearTimeout(timer);
        }, 1000);
    };

    const [isVip, setIsVip] = useState<boolean>(false);
    const getUserLevel = async () => {
        const res = await supabase.auth.getUser();
        if(res.error){}else{
            if(Number(res.data.user.user_metadata.level) > 1){
                setIsVip(true)
            }
        }
    }
    useEffect(() => {
        getUserLevel();
    }, []);
    const [showDialog, setShowDialog] = useState(true);
    const [previewImg, setPreviewImg] = useState<string>('');

    return (
        <div className={'relative width-100 height-100 flex-1 flex both-center'}>
            {/*会员查看*/}
            {communityColorCardData?.length>0 && firstIn&& <LandDialog show={showDialog} size={'small'} onClose={() => setShowDialog(false)} onSubmit={() => setShowDialog(false)} submitLabel={'知道了'}>
                <LandAlert type={'default'} title={isEnglish ? 'Warm reminder: Inspiration content will be set to [visible to members only] on May 20, 2025':'温馨提示：灵感内容将于2025年5月20日设置为【仅会员可见】'} direction={'column'}/>
            </LandDialog>}
            {(!isVip && false) ? <>
                <LandAlert type={'default'} title={isEnglish?'Visible to members only':'仅会员可见'}/>
            </> : <>
                {loading ? <>
                    <LandLoading />
                </> : (communityColorCardData && communityColorCardData?.length >0) ? <div className={'flex column gap-24 pt-24 height-100 width-100'}>
                    <div className={'px-24'}><LandAlert type={'warn'} title={isEnglish ? 'The pictures are generated by AI and are for reference only!':'图片均由AI生成，仅供参考！'}/></div>
                    <div className={'grid gap-24 px-24'}
                         style={{gridTemplateColumns: 'repeat(auto-fill,minmax(120px,1fr))',overflow:'auto'}}>
                        {communityColorCardData?.map(i => <InspirationCard id={i.id} img_url={i.img_url} className={'cursor-zoom-in'} onPreview={() => setPreviewImg(i.img_url)}/>)}
                    </div>
                </div> : <>
                    <LandState type={'empty'} title={isEnglish?'No inspiration content yet, please stay tuned':'暂无灵感内容，敬请期待'}/>
                </>}
            </>}
            {toast && <LandMessage show={toast} text={toastText}/>}
            <ImgPreview img_url={previewImg} show={Boolean(previewImg)} onClose={() => setPreviewImg('')}/>
        </div>
    )
}
export default CommunityInspirationCard;
